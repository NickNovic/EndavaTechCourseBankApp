@page "/register"
@layout EmptyLayout
@inject HttpClient httpClient;
@inject NavigationManager navManager;
@inject AuthService authService;

<PageTitle>Endava .NET Tech Course</PageTitle>

<MudGrid Class="justify-md-center">
    <MudItem sm="5">
        <MudCard>
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText Typo="Typo.h5">Inregistrare</MudText>
                </CardHeaderContent>
            </MudCardHeader>
            <MudCardContent Class="justify-md-center ">
                <MudTextField @bind-Value="newUser.FirstName" T="string" Label="Nume" />
                <MudTextField @bind-Value="newUser.LastName" T="string" Label="Prenume" />
                <MudTextField @bind-Value="newUser.Username" T="string" Label="Username"/>
                <MudTextField @bind-Value="newUser.Email" T="string" Label="Email" />
                <MudTextField @bind-Value="newUser.Password" T="string" Label="Parola" InputType="InputType.Password" />
            </MudCardContent>
        </MudCard>
        <MudPaper Class="pa-4 mt-4">
            <MudButton OnClick="RegisterNewUser" Variant="Variant.Filled" Color="Color.Secondary" DisableElevation="true" Class="mx-2">Ok</MudButton>
            <MudButton Href="/login" Variant="Variant.Filled" Color="Color.Primary" DisableElevation="true">Autentificare</MudButton>
            <MudButton Href="/" Variant="Variant.Filled" Color="Color.Primary" DisableElevation="true" Class="mx-2">Acasa</MudButton>
        </MudPaper>
    </MudItem>
</MudGrid>


@code {
    RegisterDTO newUser = new();

    public async Task RegisterNewUser()
    {
        await httpClient.PostAsJsonAsync("api/account/register", newUser);
        await authService.Login(new LoginDTO
        {
            Password = newUser.Password,
            Username = newUser.Username
        });

        CreateWalletDTO wallet = new()
        {
            Amount = 0,
            CurrencyCode = "eur",
            Type = "Basic"
        };

        await httpClient.PostAsJsonAsync("api/wallet", wallet);

        var mainWallets = await httpClient.GetFromJsonAsync<List<GetWalletDTO>>("api/wallet/getwallets");
        var resultWallet = mainWallets.FirstOrDefault(w => w.Id != Guid.Empty);
        var dto = new UserDto
        {
            Email = newUser.Email,
            FirstName = newUser.FirstName,
            LastName = newUser.LastName,
            Username = newUser.Username,
            MainWalletId = resultWallet.WalletId
        };

        await httpClient.PostAsJsonAsync("api/account/update", dto);

        newUser = new();
        navManager.NavigateTo("");
        StateHasChanged();
        
    }
}