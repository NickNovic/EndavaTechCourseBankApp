@page "/create-transaction"
@inject NavigationManager navManager;
@inject HttpClient httpClient;

<h3>Create Transaction</h3>

@if(wallets == null || Ids == null)
{
    <MudText>You have no wallets</MudText>
}
else
{
    <MudSelect T="Guid" Items="@Ids" For="@(()=>SelectedSenderId)" ValueChanged="((Guid selectedId)=>SelectWallet(selectedId))">
        @foreach(Guid s in Ids)
        {
            <MudSelectItem T="Guid" Value="@s">@s.ToString()</MudSelectItem>
        }
    </MudSelect>
    <MudTextField T="decimal" Label="Amount" @bind-Value="Amount"></MudTextField>
    <MudTextField T="Guid" Label="Id of Accepter Wallet" @bind-Value="IdOfAccepter"></MudTextField>
    <MudTextField T="string" Label="Description" @bind-Value="Description"></MudTextField>
    <MudButton OnClick="CreateTranasaction">Create transaction</MudButton>

    <MudText>Currency: @CurrencyCode</MudText>
    <MudText>Amount: @walletAmount</MudText>
    <MudText>Type: @walletType</MudText>
}

@code {
    public List<GetWalletDTO> wallets;
    public List<Guid> Ids;
    public Guid SelectedSenderId;
    public string _selectedSenderId;

    public decimal Amount;
    public Guid IdOfAccepter = Guid.Empty;
    public string Description;

    public string CurrencyCode;
    public string walletType;
    public decimal walletAmount;

    protected override async Task OnInitializedAsync()
    {
        await GetWalletsForUser();
        await base.OnInitializedAsync();
    }
    public async void SelectWallet(Guid id)
    {
        SelectedSenderId = id;
        GetWalletDTO w = wallets.FirstOrDefault(w => w.WalletId == SelectedSenderId);
        CurrencyDTO currency = await this.httpClient.GetFromJsonAsync<CurrencyDTO>("api/currencies/" + w.CurrencyId.ToString());
        CurrencyCode = currency.CurrencyCode;
        walletAmount = w.Amount;
        walletType = w.Type;

        StateHasChanged();
    }

    public async Task GetWalletsForUser()
    {
        wallets = await this.httpClient.GetFromJsonAsync<List<GetWalletDTO>>("api/wallet/getwallets");

        Ids = new List<Guid>();
        foreach (GetWalletDTO w in wallets)
        {
            Ids.Add(w.WalletId);
        }
    }
    public async Task CreateTranasaction()
    {
        var trs = new TransferDTO
        {
            Amount = this.Amount,
            CurrencyId = wallets.FirstOrDefault(w => w.WalletId == SelectedSenderId).CurrencyId,
            Description = this.Description,
            IdOfAccepter = this.IdOfAccepter,
            IdOfSender = SelectedSenderId
        };

        var res = await this.httpClient.PostAsJsonAsync("api/wallet/transfer", trs);
    }
}
